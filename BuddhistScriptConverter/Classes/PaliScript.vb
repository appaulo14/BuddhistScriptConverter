Public MustInherit Class PaliScript
    'Declar variables to contain the various types of symbols
    Protected DiṂMatras As New List(Of String) 'autogenerated
    Protected MonoṂMatras As New List(Of String) 'autogenerated
    Protected DiṂConsonants As New List(Of String) 'autogenerated
    Protected MonoṂConsonants As New List(Of String) 'autogenerated
    Protected DiMatras As New List(Of String) 'autogenerated 
    Protected MonoMatras As New List(Of String) 'autogenerated
    Protected DiConsonants As New List(Of String) 'manually defined
    Protected MonoConsonants As New List(Of String) 'manually defined
    Protected DiDeadConsonants As New List(Of String) 'autogenerated
    Protected MonoDeadConsonants As New List(Of String) 'autogenerated
    Protected ṂVowels As New List(Of String) 'autogenerated
    Protected Vowels As New List(Of String) 'manually defined
    Protected Irregulars As New List(Of String) ' manually defined
    Protected Digits As New List(Of String) 'manually defined
    Protected VowelSigns As New List(Of String) 'manually defined, not added to Symbols

    'There are two possible symbol orders, depending on 
    'whether the source script is ROman or Indic
    Enum SymbolOrder
        RomanSource = 0 'when destination script is Roman
        IndicSource = 1 'when destination script is Indic
    End Enum

    'Properties that must be defined in the derrived class
    ''' <summary>
    ''' Anusvara property
    ''' </summary>
    ''' <returns>Returns the anusvara symbol for the given script</returns>
    Protected MustOverride ReadOnly Property Anusvara() As String
    ''' <summary>
    ''' Name property
    ''' </summary>
    ''' <returns>Returns the name of the given script</returns>
    Public MustOverride ReadOnly Property Name() As String
    ''' <summary>
    ''' MySymbolOrder property
    ''' </summary>
    ''' <returns>Return the order in which this script's symbols should be 
    ''' when using it as a source script for transliteration</returns>
    Public MustOverride ReadOnly Property MySymbolOrder() As SymbolOrder

    'Methods that must be defined in the derrived class
    ''' <summary>
    ''' Define the basic symbols for the script by adding them to the symbols 
    ''' dictionaries above. The base symbols are defined here; others are 
    ''' generated based on these.
    ''' </summary>
    Protected MustOverride Sub PopulateSymbols()
    ''' <summary>
    ''' Takes a consonant and removes the inherent vowel sound from it
    ''' </summary>
    ''' <param name="inConsonant">a consonant with an inherent vowel sound</param>
    ''' <returns>A form of the consoant with no inherent vowel sound</returns>
    Protected MustOverride Function ApplyVowelSupression(ByVal inConsonant As String) As String
    ''' <summary>
    ''' Takes any non-vowel-suppressed symbol and adds an anusvara to it.
    ''' </summary>
    ''' <param name="inSymbol">Any symbol except a dead consoant</param>
    ''' <returns>The the inputted symbols with an anusvara on the end</returns>
    Protected MustOverride Function ApplyAnusvara(ByVal inSymbol As String) As String
    ''' <summary>
    ''' Takes a list of consonants and generates a list of their dependent vowel forms. 
    ''' </summary>
    ''' <param name="inConsonants">A list of consonants with an inherent "a" sound</param>
    ''' <returns>A list of consonants with all the other vowel forms besides "a"</returns>
    Protected MustOverride Function PopulateMatras(ByVal inConsonants As List(Of String)) As List(Of String)
    ''' <summary>
    ''' Takes a string and determines whether the string contains symbols from
    ''' this script. 
    ''' </summary>
    ''' <param name="inString">A string of symbols</param>
    ''' <returns>True if the inputted string has symbols from this script.
    ''' False otherwise.</returns>
    Public MustOverride Function IsUsedIn(ByVal inString As String) As Boolean

    Protected _RomanSourceSymbols As List(Of String)
    Protected _IndicSourceSymbols As List(Of String)
    ''' <summary>
    ''' Property that returns all of the symbols for this script, in either 
    ''' roman order or indic script order
    ''' </summary>
    ''' <param name="symbolOrder">Determines which symbol order to return.
    ''' Default to Roman script.</param>
    ''' <returns>All the symbols for this script</returns>
    Public ReadOnly Property Symbols(Optional ByVal symbolOrder As SymbolOrder = SymbolOrder.RomanSource) As System.Collections.Generic.List(Of String)
        Get
            If (symbolOrder = PaliScript.SymbolOrder.RomanSource) Then
                Return _RomanSourceSymbols
            Else
                Return _IndicSourceSymbols
            End If
        End Get
    End Property

    Public Sub New()
        PopulateSymbols()
    End Sub

    ''' <summary>
    ''' Takes a list of symbols and returns those symbols with anusvaras with
    ''' symbols added to the end. 
    ''' </summary>
    ''' <param name="inSymbols">A list of consonants or dependent vowel forms (matras)</param>
    ''' <returns>The inputted symbols with anusvaras added to the end.</returns>
    Protected Function PopulateAnusvaras(ByVal inSymbols As List(Of String)) As List(Of String)
        Dim anusvaraedSymbols As New List(Of String)
        For Each symbol As String In inSymbols
            anusvaraedSymbols.Add(Me.ApplyAnusvara(symbol))
        Next
        Return anusvaraedSymbols
    End Function

    ''' <summary>
    ''' Takes a list of consonants and returns those same consonants without 
    ''' the inherent vowel sound. 
    ''' </summary>
    ''' <param name="inConsonants">A list of consonants</param>
    ''' <returns>List of the inputted consonants with the inherent vowel 
    ''' sounds removed</returns>
    ''' <remarks></remarks>
    Protected Function PopulateDeadConsonants(ByVal inConsonants As List(Of String)) As List(Of String)
        Dim deadConsonants As New List(Of String)
        'Make all the consoants in the list dead
        For Each inConsonant As String In inConsonants
            deadConsonants.Add(Me.ApplyVowelSupression(inConsonant))
        Next
        Return deadConsonants
    End Function

    ''' <summary>
    ''' Combines all the symbols from all the dictionaries into a single long 
    ''' list, ordered in two different ways depending on whether the source 
    ''' transliteration script is roman or Indic
    ''' </summary>
    Protected Sub BuildSymbolsList()
        Dim romanSrcSymbols As New List(Of String)
        Dim indicSrcSymbols As New List(Of String)
        'Create two different symbol orders based on what type of script
        'is being transliterated
        With romanSrcSymbols
            .AddRange(DiṂMatras)
            .AddRange(MonoṂMatras)
            .AddRange(DiṂConsonants)
            .AddRange(MonoṂConsonants)
            .AddRange(DiMatras)
            .AddRange(MonoMatras)
            .AddRange(DiConsonants)
            .AddRange(MonoConsonants)
            .AddRange(DiDeadConsonants)
            .AddRange(MonoDeadConsonants)
            .AddRange(ṂVowels)
            .AddRange(Vowels)
            .AddRange(Irregulars)
            .AddRange(Digits)
        End With
        _RomanSourceSymbols = romanSrcSymbols
        With indicSrcSymbols
            .AddRange(DiṂMatras)
            .AddRange(MonoṂMatras)
            .AddRange(DiṂConsonants)
            .AddRange(MonoṂConsonants)
            .AddRange(DiMatras)
            .AddRange(MonoMatras)
            .AddRange(DiDeadConsonants)
            .AddRange(MonoDeadConsonants)
            .AddRange(DiConsonants)
            .AddRange(MonoConsonants)
            .AddRange(ṂVowels)
            .AddRange(Vowels)
            .AddRange(Irregulars)
            .AddRange(Digits)
        End With
        _IndicSourceSymbols = indicSrcSymbols
    End Sub

    ''' <summary>
    ''' Takes the list populated in PopulateSymbols and generates 
    ''' the remainder of the symbols from them, creating a full 
    ''' set of symbols.
    ''' </summary>
    Protected Sub PopulateAutogeneratedLists()
        'Populate dead consonants
        DiDeadConsonants = PopulateDeadConsonants(DiConsonants)
        MonoDeadConsonants = PopulateDeadConsonants(MonoConsonants)
        'Populate matras
        DiMatras = PopulateMatras(DiConsonants)
        MonoMatras = PopulateMatras(MonoConsonants)
        'Add anusvara to matras and consonants
        DiṂMatras = PopulateAnusvaras(DiMatras)
        MonoṂMatras = PopulateAnusvaras(MonoMatras)
        DiṂConsonants = PopulateAnusvaras(DiConsonants)
        MonoṂConsonants = PopulateAnusvaras(MonoConsonants)
        ṂVowels = PopulateAnusvaras(Vowels)
    End Sub
End Class
